import * as React from "react";
import { Frame, PropertyControls, ControlType } from "framer";

// Define type of property
interface Props {
  radius: number;
  width: number;
  height: number;
  value1StrokeColor: string;
  value2StrokeColor: string;
  bgColor: string;
  overrideTextColor: boolean;
  valueColor: string;
  strokeWidth: number;
  strokePercent: number;
  dashArray: number;
  dashOffset: number;
  valueSize: number;
}

export class CircleGraph_2Value extends React.Component<Props> {
  // Set default properties
  static defaultProps = {
    width: 80,
    height: 80,
    radius: 40,
    value1StrokeColor: "#A996ED",
    value2StrokeColor: "#FFCE6B",
    bgColor: "transparent",
    overrideTextColor: false,
    valueColor: "#666",
    strokePercent: 0,
    strokeWidth: 4,
    dashArray: 0,
    dashOffset: 0,
    valueSize: 16
  };

  // Items shown in property panel
  static propertyControls: PropertyControls = {
    strokePercent: {
      type: ControlType.Number,
      max: 100,
      min: 0,
      unit: "%",
      title: "Percent"
    },
    radius: {
      type: ControlType.Number,
      max: 500,
      min: 0,
      title: "Radius"
    },
    strokeWidth: {
      type: ControlType.Number,
      title: "Stroke Width"
    },

    valueSize: {
      type: ControlType.Number,
      max: 500,
      min: 4,
      title: "Text Size"
    },

    overrideTextColor: {
      type: ControlType.Boolean,
      title: "Override Color"
    },

    valueColor: {
      type: ControlType.Color,
      hidden(props) {
        return props.overrideTextColor === false;
      },
      title: "Text Color"
    },

    value1StrokeColor: {
      type: ControlType.Color,

      title: "Value1 Stroke"
    },

    value2StrokeColor: {
      type: ControlType.Color,

      title: "Value2 Stroke"
    },

    bgColor: {
      type: ControlType.Color,
      title: "Background"
    }
  };

  pathLength: number = Math.round(2 * Math.PI * this.props.radius);

  componentDidMount() {
    //console.log(this.pathLength);
    //console.log(this.calcLength());
  }

  componentDidUpdate(prevProps) {
    if (this.props.radius != prevProps.radius) {
      this.pathLength = Math.round(2 * Math.PI * this.props.radius);
      this.calcLength();
      //console.log(this.pathLength, this.calcLength());
    }
  }

  calcLength() {
    const { strokePercent, dashArray, dashOffset } = this.props;
    let strokeFraction = Math.round((strokePercent / 100) * this.pathLength);

    return strokeFraction;
  }

  render() {
    const {
      radius,
      strokeWidth,
      value1StrokeColor,
      value2StrokeColor,
      bgColor,
      overrideTextColor,
      valueColor,
      dashArray,
      dashOffset,
      strokePercent,
      valueSize,
      width,
      height
    } = this.props;

    const viewBoxSize = this.props.radius * 2 + this.props.strokeWidth;
    return (
      <div style={container}>
        <Frame
          width={width}
          height={height}
          style={{
            display: "grid",
            alignItems: "center",
            justifyItems: "center",
            background: "transparent"
          }}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox={`0 0 ${viewBoxSize} ${viewBoxSize}`}
            width={`${radius * 2}`}
            height={`${radius * 2}`}
            style={{
              flexShrink: 0
            }}
          >
            <g>
              <circle
                id="circle2"
                cx="50%"
                cy="50%"
                r={radius}
                strokeWidth={strokeWidth}
                stroke={value1StrokeColor}
                strokeDasharray="0"
                strokeDashoffset="0"
                fill="transparent"
                transform={`scale(1, -1) translate(0, ${-viewBoxSize}) rotate(90, ${viewBoxSize /
                  2}, ${viewBoxSize / 2})`}
              />
              <circle
                id="circle1"
                cx="50%"
                cy="50%"
                r={radius}
                strokeWidth={strokeWidth}
                stroke={value2StrokeColor}
                strokeDasharray={this.pathLength}
                strokeDashoffset={`${this.calcLength()}`}
                fill="transparent"
                transform={`scale(1, -1) translate(0, ${-viewBoxSize}) rotate(90, ${viewBoxSize /
                  2}, ${viewBoxSize / 2})`}
              />
            </g>
          </svg>
        </Frame>
        <div
          style={{
            color: "#aaa",
            fontSize: valueSize,
            background: bgColor,
            borderRadius: "50%",
            width: radius * 2,
            height: radius * 2,
            display: "grid",
            alignItems: "center",
            justifyItems: "center"
          }}
        >
          <p>
            <span
              style={{
                color: overrideTextColor ? valueColor : value2StrokeColor
              }}
            >
              {100 - strokePercent}
            </span>{" "}
            |{" "}
            <span
              style={{
                color: overrideTextColor ? valueColor : value1StrokeColor
              }}
            >
              {strokePercent}
            </span>
          </p>
        </div>
      </div>
    );
  }
}

const container: React.CSSProperties = {
  width: "100%",
  height: "100%",
  display: "grid",
  alignItems: "center",
  justifyItems: "center",
  textAlign: "center",
  color: "#666",
  overflow: "hidden",
  background: "transparent"
};
